"""
This plugin provides a 'htmlreport' command, to generate an issue list in HTML form.
"""

from datetime import datetime

_HTML_HEAD = """\
<html>
<head>
   <title>Later Do</title>
   <style>
body {
   max-width: 40em;
   margin: 1em auto;
   font-family: Arial, "Helvetica Neue", Helvetica, sans-serif;
}
h1 { font-weight: bold; font-style: italic; }
h1,
.status_closed,
.stats th,
.properties th,
.issue .guid { color: #777; }
.stats th,
.properties th { text-align: right; font-weight: normal; }
.issue { border-left: 2px solid #ddd; padding-left: 5px; }
.issue .guid { float: right; }
.issue .guid,
.issue .msg { font-family: monospace; }
.issue .msg { white-space: pre; }
.issue .guid,
#footer { font-size: 0.8em; }
#footer { margin: 2em auto; }
   </style>
</head>
<body>
   <h1>Later Do</h1>
"""

_HTML_ISSUE = """
<div class="issue status_%(status)s">
<span class="guid">%(guid)s</span>
<h2>%(title)s</h2>
<table class="properties">
   <tr><th>status</th><td>%(status)s</td></tr>
   <tr><th>responsible</th><td>%(responsible)s</td></tr>
</table>
<div class="msg">%(msg)s</div>
</div>
"""

_HTML_FOOT = """\
<div id="footer">
   Generated by the <a href="http://github.com/beza1e1/later">later</a> htmlreport plugin
   on %s.
</div>
</body>
</html>
""" % datetime.now().strftime("%Y/%m/%d")

_HOOKS=None

class Stats:
   def __init__(self):
      self.open_issues = 0
      self.unassigned_issues = 0
   def process(self, info):
      if info['status'] != "closed":
         self.open_issues += 1
         if info['responsible'] == "nobody":
            self.unassigned_issues += 1
   def toHTML(self):
      string = '<table class="stats">'
      string += '<tr><th>Open</th><td>%d</td></tr>\n' % self.open_issues
      string += '<tr><th>Unassigned</th><td>%d</td></tr>\n' % self.unassigned_issues
      string += "</table>"
      return string

def cmd_htmlreport(args):
   """Generate an html issue list."""
   # load data
   delayed = list()
   opened = list()
   stats = Stats()
   for guid in _HOOKS.be_all_guids():
      guid = _HOOKS.be_complete_guid(guid)
      issue = _HOOKS.be_load_issue(guid)
      info = issue.properties.copy()
      i = issue.msg.find("\n")
      if i < 0:
         i = len(issue.msg)
      info['title'] = issue.msg[:i]
      info['msg'] = issue.msg[i:]
      info['guid'] = guid
      stats.process(info)
      if info['status'] != "closed":
         opened.append(info)
      else:
         delayed.append(info)
   # output
   print(_HTML_HEAD)
   print((stats.toHTML()))
   for info in opened:
      print((_HTML_ISSUE % info))
   if delayed:
      print("<hr/>")
   for info in delayed:
      print((_HTML_ISSUE % info))
   print(_HTML_FOOT)

def plugin_init(hooks):
   global _HOOKS
   hooks["cmd_htmlreport"] = cmd_htmlreport
   _HOOKS = hooks


